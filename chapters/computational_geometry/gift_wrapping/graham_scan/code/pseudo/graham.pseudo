type Point{
    Float64 x,y
}

function ccw(Point a, Point b, Point c){
    return (b.x - a.x)*(c.y - a.y) - (b.y - a.y)*(c.x - a.x)
}

function graham_scan(Vector{Point} points){
    N = length(points)

    # Place the lowest point at the start of the array
    swap(points[0], lowest(points[0]))
    
    # Sort according to angle with that point
    # Note: Not sure how to show lambda functions in psuedocode...
    sort(points, points[c] -> angle({0,0}, points[0], c)

    # M will be the point on the hull
    Int64 M = 1
    for (i = 2:N){
        while (ccw(points[M-1], points[M], points[i]) <= 0){
            # Removing the ccw point from the hull by skipping its index
            if (M > 1){
                M -= 1
            }
            # All points are collinear
            else if (i == N){
                break
            }
            else {
                i++
            }
        }

        # ccw point found, updating hull and swapping points
        M++
        swap(points[i], points[m])
    }
}
